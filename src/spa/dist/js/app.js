let auth0Client=null;const login=async t=>{try{console.log("Logging in",t);const o={authorizationParams:{redirect_uri:window.location.origin}};t&&(o.appState={targetUrl:t}),await auth0Client.loginWithRedirect(o)}catch(t){console.log("Log in failed",t)}},loginClient1=async t=>{try{console.log("Logging in",t);const o={authorizationParams:{redirect_uri:window.location.origin,connection:"client1-database"}};t&&(o.appState={targetUrl:t}),await auth0Client.loginWithRedirect(o)}catch(t){console.log("Log in failed",t)}},loginClient2=async t=>{try{console.log("Logging in",t);const o={authorizationParams:{redirect_uri:window.location.origin,connection:"client2-database"}};t&&(o.appState={targetUrl:t}),await auth0Client.loginWithRedirect(o)}catch(t){console.log("Log in failed",t)}},logout=async()=>{try{console.log("Logging out"),await auth0Client.logout({logoutParams:{returnTo:window.location.origin}})}catch(t){console.log("Log out failed",t)}},fetchAuthConfig=()=>fetch("/auth_config.json"),configureClient=async()=>{const t=await fetchAuthConfig(),o=await t.json();auth0Client=await auth0.createAuth0Client({domain:o.domain,clientId:o.clientId})},requireAuth=async(t,o)=>await auth0Client.isAuthenticated()?t():login(o);window.onload=async()=>{if(await configureClient(),showContentFromUrl(window.location.pathname)||(showContentFromUrl("/"),window.history.replaceState({url:"/"},{},"/")),document.getElementsByTagName("body")[0].addEventListener("click",(t=>{if(isRouteLink(t.target)){const o=t.target.getAttribute("href");showContentFromUrl(o)&&(t.preventDefault(),window.history.pushState({url:o},{},o))}})),await auth0Client.isAuthenticated())return console.log("> User is authenticated"),window.history.replaceState({},document.title,window.location.pathname),void updateUI();console.log("> User not authenticated");const t=window.location.search;if(t.includes("code=")&&t.includes("state=")){console.log("> Parsing redirect");try{const t=await auth0Client.handleRedirectCallback();t.appState&&t.appState.targetUrl&&showContentFromUrl(t.appState.targetUrl),console.log("Logged in!")}catch(t){console.log("Error parsing redirect:",t)}window.history.replaceState({},document.title,"/")}updateUI()};